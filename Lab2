import random as rand
from math import sqrt

variant = 303
m = 5
y_max = (30 - variant) * 10
y_min = (20 - variant) * 10

x1_min, x1_max, x2_min, x2_max = -20, 30, -20, 40
normalized = [[-1, -1], [-1, 1], [1, -1]]


def averageY(list):
    Y_list_average = []
    for i in range(len(list)):
        sum= 0
        for j in list[i]:
            sum += j
        Y_list_average.append(sum / len(list[i]))
    return Y_list_average


def dispersion(list):
    dispersion_list = []
    for i in range(len(list)):
        sum = 0
        for j in list[i]:
            sum += (j - averageY(list)[i]) * (j - averageY(list)[i])
        dispersion_list.append(sum / len(list[i]))
    return dispersion_list


def fuv(u, v):
    if u >= v:
        return u / v
    else:
        return v / u


def det(x11, x12, x13, x21, x22, x23, x31, x32, x33):
    return x11 * x22 * x33 + x12 * x23 * x31 + x32 * x21 * x13 - x13 * x22 * x31 - x32 * x23 * x11 - x12 * x21 * x33


def main():
    global m
    y = [[rand.randint(y_min, y_max) for j in range(6)] for i in range(3)]
    avY = averageY(y)

    print('Planning matrix with m=', m)
    for i in range(3):
        print(y[i])

    sigmaTeta = sqrt((2 * (2 * m - 2)) / (m * (m - 4)))

    Fuv = []
    teta = []
    Roman_kr = []

    Fuv.append(fuv(dispersion(y)[0], dispersion(y)[1]))
    Fuv.append(fuv(dispersion(y)[2], dispersion(y)[0]))
    Fuv.append(fuv(dispersion(y)[2], dispersion(y)[1]))

    teta.append(((m - 2) / m) * Fuv[0])
    teta.append(((m - 2) / m) * Fuv[1])
    teta.append(((m - 2) / m) * Fuv[2])

    Roman_kr.append(abs(teta[0] - 1) / sigmaTeta)
    Roman_kr.append(abs(teta[1] - 1) / sigmaTeta)
    Roman_kr.append(abs(teta[2] - 1) / sigmaTeta)

    Rkr = 2

    for i in range(len(Roman_kr)):
        if Roman_kr[i] > Rkr:
            print('Heterogeneous dispersion, increase the number of experiments')
            m += 1
            main()


    mx1 = (normalized[0][0] + normalized[1][0] + normalized[2][0]) / 3
    mx2 = (normalized[0][1] + normalized[1][1] + normalized[2][1]) / 3
    my = (avY[0] + avY[1] + avY[2]) / 3

    a1 = (normalized[0][0] ** 2 + normalized[1][0] ** 2 + normalized[2][0] ** 2) / 3
    a2 = (normalized[0][0] * normalized[0][1] + normalized[1][0] * normalized[1][1] + normalized[2][0] * normalized[2][
        1]) / 3
    a3 = (normalized[0][1] ** 2 + normalized[1][1] ** 2 + normalized[2][1] ** 2) / 3

    a11 = (normalized[0][0] * avY[0] + normalized[1][0] * avY[1] + normalized[2][0] * avY[2]) / 3
    a22 = (normalized[0][1] * avY[0] + normalized[1][1] * avY[1] + normalized[2][1] * avY[2]) / 3

    b0 = det(my, mx1, mx2, a11, a1, a2, a22, a2, a3) / det(1, mx1, mx2, mx1, a1, a2, mx2, a2, a3)
    b1 = det(1, my, mx2, mx1, a11, a2, mx2, a22, a3) / det(1, mx1, mx2, mx1, a1, a2, mx2, a2, a3)
    b2 = det(1, mx1, my, mx1, a1, a11, mx2, a2, a22) / det(1, mx1, mx2, mx1, a1, a2, mx2, a2, a3)

    y_pr1 = b0 + b1 * normalized[0][0] + b2 * normalized[0][1]
    y_pr2 = b0 + b1 * normalized[1][0] + b2 * normalized[1][1]
    y_pr3 = b0 + b1 * normalized[2][0] + b2 * normalized[2][1]

    dx1 = abs(x1_max - x1_min) / 2
    dx2 = abs(x2_max - x2_min) / 2
    x10 = (x1_max + x1_min) / 2
    x20 = (x2_max + x2_min) / 2

    a_0 = b0 - (b1 * x10 / dx1) - (b2 * x20 / dx2)
    a_1 = b1 / dx1
    a_2 = b2 / dx2

    yP1 = a_0 + a_1 * x1_min + a_2 * x2_min
    yP2 = a_0 + a_1 * x1_max + a_2 * x2_min
    yP3 = a_0 + a_1 * x1_min + a_2 * x2_max

    print('Experimental values of the Romanovsky criterion:')
    for i in range(3):
        print(Roman_kr[i])

    print('Naturalized coefficients: \na0 =', round(a_0, 4), 'a1 =', round(a_1, 4), 'a2 =', round(a_2, 4))
    print('In practise ', round(y_pr1, 4), round(y_pr2, 4), round(y_pr3, 4),
          '\nУ середній', round(avY[0], 4), round(avY[1], 4), round(avY[2], 4))
    print('Normalized in practise:', round(yP1, 4), round(yP2, 4), round(yP3, 4))

main()
